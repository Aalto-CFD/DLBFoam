/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  2.0.1                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       volVectorField;
    object      U;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [0 1 -1 0 0 0 0];

internalField  #codeStream
{

    code
    #{

        const IOdictionary& d = static_cast<const IOdictionary&>(dict);
        const fvMesh& mesh = refCast<const fvMesh>(d.db());
        const vectorField& CC = mesh.C(); //cell center
        
         
        vectorField U(mesh.nCells());
        scalar Umax = 40;

        scalar L = 0.008;
        scalar ro = 0.0004;
        scalar B = 5;
        
        

        forAll(CC,cellI)
        {

            
        	scalar y = CC[cellI].y(); 
        	scalar x = CC[cellI].x(); 

            U[cellI] = vector(1,0,0) * Umax * 0.5 *(1-tanh(B*(mag(y-L/2)/ro - ro/mag(y-L/2)))) + vector(0,1,0)*(Umax/2000)*sin(2*constant::mathematical::pi*x/(L/2));
            
    
        }
        
        writeEntry(os,"",U); 
    #};

    //! Optional:
    codeInclude
    #{

        #include "fvCFD.H"

    #};


    codeOptions
    #{

        -I$(LIB_SRC)/finiteVolume/lnInclude \
        -I$(LIB_SRC)/meshTools/lnInclude

    #};


    //! libs:

    codeLibs
    #{
        -lmeshTools \
        -lfiniteVolume
    #};

};

boundaryField
{
    upperBoundary
    {
        type            cyclic;
    }

    lowerBoundary
    {
        type            cyclic;
    }

    leftBoundary
    {
        type            cyclic;
    }

    rightBoundary
    {
        type            cyclic;
    }
    frontAndBack
    {
        type            empty;
    }
}
// ************************************************************************* //

