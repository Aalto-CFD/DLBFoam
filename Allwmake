#!/bin/bash
cd ${0%/*} || exit 1    # run from this directory

set -e # Any subsequent(*) commands which fail will cause the shell script to exit immediately

# The supported OpenFOAM version
OF_VER="11"

check_openfoam()
{
    if [ -z ${WM_PROJECT} ]; then
        echo "OpenFOAM environment not set."
        exit 1
    fi

    if [[ ! "$WM_PROJECT_VERSION" == "$OF_VER" ]]; then
        echo "Error: OpenFOAM-$WM_PROJECT_VERSION not supported."
        echo "       See other git branches for potential support."
        exit 1
    fi
}

check_mkl()
{
    if [ -d "$MKLROOT" ]; then
        echo "Utilising Intel MKL version from path: ${MKLROOT}"
    else
        echo "Error: MKLROOT=${MKLROOT} not found."
        exit 1
    fi
}

check_openblas()
{
    if [ -d "$OPENBLAS_INSTALL_ROOT" ]; then
        echo "Utilising OpenBLAS from path: ${OPENBLAS_INSTALL_ROOT}"
    else
        echo "Error: OPENBLAS_INSTALL_ROOT=${OPENBLAS_INSTALL_ROOT} not found."
        exit 1
    fi
}


check_cmake()
{
    if ! command -v cmake &> /dev/null
    then
        echo "Error: cmake could not be found. Required for compiling the pyJac C-library."
        exit 1
    fi
}

how_to()
{
    echo "Error: Correct platform syntax ./Allwmake --platform MKL/OPENBLAS/STANDALONE"
}


PLATFORM=NOT_DEFINED
CLEAN_ALL=false
POSITIONAL=()
while [[ $# -gt 0 ]]
do
    key="$1"
    case $key in
        --clean)
        CLEAN_ALL=true
        shift # past argument
        ;;
        --platform)
        PLATFORM="$2"
        shift # past argument
        shift # past value
        ;;
        *)
        how_to
        exit 1
        ;;
    esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters


check_openfoam
check_cmake

if [ $PLATFORM == MKL ]; then
    check_mkl
    cp  src/ODE_DLB/Make/options.mkl src/ODE_DLB/Make/options
elif [ $PLATFORM == OPENBLAS ]; then
    check_openblas
    cp  src/ODE_DLB/Make/options.openblas src/ODE_DLB/Make/options
elif [ $PLATFORM == STANDALONE ]; then
    cp  src/ODE_DLB/Make/options.standalone src/ODE_DLB/Make/options
else
    how_to
    exit 1
fi


if [ $CLEAN_ALL == true ]; then
    ./Allwclean
fi


wmake libso src/thermophysicalModels/chemistryModel
cp -r src/thermophysicalModels/chemistryModel/pyJacInclude src/thermophysicalModels/chemistryModel/lnInclude
wmake libso src/ODE_DLB

# copy files needed for dynamic compilation of chemistry models and solvers
DLB_ETC_DC=etc/codeTemplates/dynamicCode
USER_ETC_DC=${HOME}/.OpenFOAM/${WM_PROJECT_VERSION}/codeTemplates/dynamicCode
cp $DLB_ETC_DC/basicChemistryModel.orig \
   $DLB_ETC_DC/basicChemistryModel
sed -i "s|%MY_DLBFOAM_PATH%|${PWD}|g" \
    $DLB_ETC_DC/basicChemistryModel
mkdir --parents $USER_ETC_DC
cp $DLB_ETC_DC/basicChemistryModel $USER_ETC_DC
cp $DLB_ETC_DC/basicChemistryModelTemplate.C $USER_ETC_DC


pushd tests/validation/pyjacTests/pyjacTestMechanism/lib  > /dev/null
    ./runCmake.sh
popd  > /dev/null

wmake tests/unittests

wmake tests/validation/pyjacTests/PSRTest

pushd tests/unittests  > /dev/null
    ./test.sh
popd  > /dev/null

pushd tests/validation/pyjacTests/PSRTest  > /dev/null
    ./runTests.sh
popd  > /dev/null

cp -r utilities/mechanisms/yao tutorials/reactingFoam/shearlayer_DLB_pyJac/pyJac
cp utilities/CMakeLists.txt tutorials/reactingFoam/shearlayer_DLB_pyJac/pyJac/lib/
cp utilities/runCmake.sh tutorials/reactingFoam/shearlayer_DLB_pyJac/pyJac/lib/

cp -r utilities/mechanisms/gri30 tutorials/chemFoam/gri_pyJac/pyJac
cp utilities/CMakeLists.txt tutorials/chemFoam/gri_pyJac/pyJac/lib/
cp utilities/runCmake.sh tutorials/chemFoam/gri_pyJac/pyJac/lib/
